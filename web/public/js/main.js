(()=>{"use strict";var e,n,t,r,o,c,u={629:(e,n,t)=>{t.a(e,(async(r,o)=>{try{t.d(n,{EF:()=>Q,Ip:()=>X,KQ:()=>H,NT:()=>F,OF:()=>W,Oo:()=>Z,Or:()=>ne,R_:()=>A,TL:()=>C,Wl:()=>B,XP:()=>K,YN:()=>J,ZL:()=>q,_3:()=>M,cb:()=>V,eY:()=>N,mR:()=>L,m_:()=>ee,mm:()=>R,oH:()=>te,pk:()=>I,qc:()=>U,rC:()=>G,sP:()=>z,u:()=>P,ug:()=>k,vm:()=>$,wA:()=>D,xB:()=>Y,xf:()=>j});var c=t(939);e=t.hmd(e);var u=r([c]);c=(u.then?(await u)():u)[0];const i=new Array(32).fill(void 0);function a(e){return i[e]}i.push(void 0,null,!0,!1);let _=i.length;function f(e){e<36||(i[e]=_,_=e)}function b(e){const n=a(e);return f(e),n}function l(e){_===i.length&&i.push(i.length+1);const n=_;return _=i[n],i[n]=e,n}let s=new("undefined"==typeof TextDecoder?(0,e.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});s.decode();let d=null;function g(){return null!==d&&d.buffer===c.memory.buffer||(d=new Uint8Array(c.memory.buffer)),d}function w(e,n){return s.decode(g().subarray(e,e+n))}let m=0,p=new("undefined"==typeof TextEncoder?(0,e.require)("util").TextEncoder:TextEncoder)("utf-8");const y="function"==typeof p.encodeInto?function(e,n){return p.encodeInto(e,n)}:function(e,n){const t=p.encode(e);return n.set(t),{read:e.length,written:t.length}};function h(e,n,t){if(void 0===t){const t=p.encode(e),r=n(t.length);return g().subarray(r,r+t.length).set(t),m=t.length,r}let r=e.length,o=n(r);const c=g();let u=0;for(;u<r;u++){const n=e.charCodeAt(u);if(n>127)break;c[o+u]=n}if(u!==r){0!==u&&(e=e.slice(u)),o=t(o,r,r=u+3*e.length);const n=g().subarray(o+u,o+r);u+=y(e,n).written}return m=u,o}let v=null;function x(e,n){const t=n(4*e.length);return(null!==v&&v.buffer===c.memory.buffer||(v=new Uint32Array(c.memory.buffer)),v).set(e,t/4),m=e.length,t}let E=null;function T(){return null!==E&&E.buffer===c.memory.buffer||(E=new Int32Array(c.memory.buffer)),E}function A(e,n,t){try{const u=c.__wbindgen_add_to_stack_pointer(-16),i=h(e,c.__wbindgen_malloc,c.__wbindgen_realloc),a=m,_=x(n,c.__wbindgen_malloc),f=m;c.generate(u,i,a,_,f,t);var r=T()[u/4+0],o=T()[u/4+1];return w(r,o)}finally{c.__wbindgen_add_to_stack_pointer(16),c.__wbindgen_free(r,o)}}function O(e,n){try{return e.apply(this,n)}catch(e){c.__wbindgen_exn_store(l(e))}}function S(e,n){return g().subarray(e/1,e/1+n)}function j(e,n){alert(w(e,n))}function k(e){b(e)}function I(e){return l(a(e).process)}function B(e){const n=a(e);return"object"==typeof n&&null!==n}function P(e){return l(a(e).versions)}function F(e){return l(a(e).node)}function N(e){return"string"==typeof a(e)}function U(){return O((function(e,n,t){return l(a(e).require(w(n,t)))}),arguments)}function L(e){return l(a(e).crypto)}function q(e){return l(a(e).msCrypto)}function z(){return O((function(e,n){a(e).getRandomValues(a(n))}),arguments)}function D(){return l(e)}function R(){return O((function(e,n,t){a(e).randomFillSync(S(n,t))}),arguments)}function C(e,n){return l(new Function(w(e,n)))}function M(){return O((function(e,n){return l(a(e).call(a(n)))}),arguments)}function W(){return O((function(){return l(self.self)}),arguments)}function Y(){return O((function(){return l(window.window)}),arguments)}function H(){return O((function(){return l(globalThis.globalThis)}),arguments)}function $(){return O((function(){return l(t.g.global)}),arguments)}function K(e){return void 0===a(e)}function Q(e){return l(a(e).buffer)}function V(e){return l(new Uint8Array(a(e)))}function X(e,n,t){a(e).set(a(n),t>>>0)}function Z(e){return a(e).length}function G(e){return l(new Uint8Array(e>>>0))}function J(e,n,t){return l(a(e).subarray(n>>>0,t>>>0))}function ee(e){return l(a(e))}function ne(e,n){throw new Error(w(e,n))}function te(){return l(c.memory)}o()}catch(re){o(re)}}))},607:(e,n,t)=>{t.a(e,(async(e,n)=>{try{var r=t(629),o=e([r]);r=(o.then?(await o)():o)[0];var c=document.getElementById("maze-options"),u=document.getElementById("maze-type"),i=document.getElementById("maze-width"),a=document.getElementById("maze-height"),_=document.getElementById("maze");c.addEventListener("submit",(function(e){var n;if(e.preventDefault(),"rectangle"!==u.children[u.selectedIndex].value)throw new Error("Unknown maze type");var t=i.valueAsNumber,o=a.valueAsNumber,c=[t/2,0],f=[t/2,o-1],b=Uint32Array.of(t,o,f[0],f[1],c[0],c[1]);n=r.R_("rectangle",b,50),console.log(n),_.innerHTML=n})),n()}catch(e){n(e)}}))},939:(e,n,t)=>{t.a(e,(async(r,o)=>{try{var c,u=r([c=t(629)]),[c]=u.then?(await u)():u;await t.v(n,e.id,"9e679e9bc9a3282113e1",{"./generator_bg.js":{__wbg_alert_d6054d59342dcbb7:c.xf,__wbindgen_object_drop_ref:c.ug,__wbg_process_70251ed1291754d5:c.pk,__wbindgen_is_object:c.Wl,__wbg_versions_b23f2588cdb2ddbb:c.u,__wbg_node_61b8c9a82499895d:c.NT,__wbindgen_is_string:c.eY,__wbg_require_2a93bc09fee45aca:c.qc,__wbg_crypto_2f56257a38275dbd:c.mR,__wbg_msCrypto_d07655bf62361f21:c.ZL,__wbg_getRandomValues_fb6b088efb6bead2:c.sP,__wbg_static_accessor_NODE_MODULE_33b45247c55045b0:c.wA,__wbg_randomFillSync_654a7797990fb8db:c.mm,__wbg_newnoargs_e23b458e372830de:c.TL,__wbg_call_ae78342adc33730a:c._3,__wbg_self_99737b4dcdf6f0d8:c.OF,__wbg_window_9b61fbbf3564c4fb:c.xB,__wbg_globalThis_8e275ef40caea3a3:c.KQ,__wbg_global_5de1e0f82bddcd27:c.vm,__wbindgen_is_undefined:c.XP,__wbg_buffer_7af23f65f6c64548:c.EF,__wbg_new_cc9018bd6f283b6f:c.cb,__wbg_set_f25e869e4565d2a2:c.Ip,__wbg_length_0acb1cf9bbaf8519:c.Oo,__wbg_newwithlength_8f0657faca9f1422:c.rC,__wbg_subarray_da527dbd24eafb6b:c.YN,__wbindgen_object_clone_ref:c.m_,__wbindgen_throw:c.Or,__wbindgen_memory:c.oH}}),o()}catch(e){o(e)}}),1)}},i={};function a(e){var n=i[e];if(void 0!==n)return n.exports;var t=i[e]={id:e,loaded:!1,exports:{}};return u[e](t,t.exports,a),t.loaded=!0,t.exports}e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",n="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),c=(e,n)=>e?e.push(n):o(n),a.a=(u,i,a)=>{var _,f,b,l=a&&[],s=u.exports,d=!0,g=!1,w=(n,t,r)=>{g||(g=!0,t.r+=n.length,n.map(((n,o)=>n[e](t,r))),g=!1)},m=new Promise(((e,n)=>{b=n,f=()=>(e(s),r(l),l=0)}));m[n]=s,m[e]=(e,n)=>{if(d)return o(e);_&&w(_,e,n),c(l,e),m.catch(n)},u.exports=m,i((u=>{var i;_=(u=>u.map((u=>{if(null!==u&&"object"==typeof u){if(u[e])return u;if(u.then){var i=[];u.then((e=>{a[n]=e,r(i),i=0}),(e=>{a[t]=e,r(i),i=0}));var a={};return a[e]=(e,n)=>(c(i,e),u.catch(n)),a}}var _={};return _[e]=e=>o(e),_[n]=u,_})))(u);var a=()=>_.map((e=>{if(e[t])throw e[t];return e[n]})),f=new Promise(((e,n)=>{(i=()=>e(a)).r=0,w(_,i,n)}));return i.r?f:a()}),(e=>(e&&b(m[t]=e),f()))),d=!1},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.v=(e,n,t,r)=>{var o=fetch(a.p+""+t+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,r).then((n=>Object.assign(e,n.instance.exports))):o.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,r))).then((n=>Object.assign(e,n.instance.exports)))},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var n=a.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";var e,n,t,r,o,c,a={629:(e,n,t)=>{t.a(e,(async(r,o)=>{try{t.d(n,{EF:()=>Q,Ip:()=>X,KQ:()=>H,NT:()=>P,OF:()=>W,Oo:()=>Z,Or:()=>ne,R_:()=>T,TL:()=>C,Wl:()=>B,XP:()=>K,YN:()=>J,ZL:()=>z,_3:()=>M,cb:()=>V,eY:()=>N,mR:()=>F,m_:()=>ee,mm:()=>D,oH:()=>te,pk:()=>k,qc:()=>U,rC:()=>G,sP:()=>R,u:()=>L,ug:()=>j,vm:()=>$,wA:()=>q,xB:()=>Y,xf:()=>S});var c=t(939);e=t.hmd(e);var a=r([c]);c=(a.then?(await a)():a)[0];const i=new Array(32).fill(void 0);function u(e){return i[e]}i.push(void 0,null,!0,!1);let _=i.length;function f(e){e<36||(i[e]=_,_=e)}function d(e){const n=u(e);return f(e),n}function l(e){_===i.length&&i.push(i.length+1);const n=_;return _=i[n],i[n]=e,n}let b=new("undefined"==typeof TextDecoder?(0,e.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});b.decode();let s=null;function g(){return null!==s&&s.buffer===c.memory.buffer||(s=new Uint8Array(c.memory.buffer)),s}function w(e,n){return b.decode(g().subarray(e,e+n))}let m=0,y=new("undefined"==typeof TextEncoder?(0,e.require)("util").TextEncoder:TextEncoder)("utf-8");const p="function"==typeof y.encodeInto?function(e,n){return y.encodeInto(e,n)}:function(e,n){const t=y.encode(e);return n.set(t),{read:e.length,written:t.length}};function h(e,n,t){if(void 0===t){const t=y.encode(e),r=n(t.length);return g().subarray(r,r+t.length).set(t),m=t.length,r}let r=e.length,o=n(r);const c=g();let a=0;for(;a<r;a++){const n=e.charCodeAt(a);if(n>127)break;c[o+a]=n}if(a!==r){0!==a&&(e=e.slice(a)),o=t(o,r,r=a+3*e.length);const n=g().subarray(o+a,o+r);a+=p(e,n).written}return m=a,o}let v=null;function x(e,n){const t=n(4*e.length);return(null!==v&&v.buffer===c.memory.buffer||(v=new Uint32Array(c.memory.buffer)),v).set(e,t/4),m=e.length,t}let E=null;function A(){return null!==E&&E.buffer===c.memory.buffer||(E=new Int32Array(c.memory.buffer)),E}function T(e,n,t){try{const a=c.__wbindgen_add_to_stack_pointer(-16),i=h(e,c.__wbindgen_malloc,c.__wbindgen_realloc),u=m,_=x(n,c.__wbindgen_malloc),f=m;c.generate(a,i,u,_,f,t);var r=A()[a/4+0],o=A()[a/4+1];return w(r,o)}finally{c.__wbindgen_add_to_stack_pointer(16),c.__wbindgen_free(r,o)}}function O(e,n){try{return e.apply(this,n)}catch(e){c.__wbindgen_exn_store(l(e))}}function I(e,n){return g().subarray(e/1,e/1+n)}function S(e,n){alert(w(e,n))}function j(e){d(e)}function k(e){return l(u(e).process)}function B(e){const n=u(e);return"object"==typeof n&&null!==n}function L(e){return l(u(e).versions)}function P(e){return l(u(e).node)}function N(e){return"string"==typeof u(e)}function U(){return O((function(e,n,t){return l(u(e).require(w(n,t)))}),arguments)}function F(e){return l(u(e).crypto)}function z(e){return l(u(e).msCrypto)}function R(){return O((function(e,n){u(e).getRandomValues(u(n))}),arguments)}function q(){return l(e)}function D(){return O((function(e,n,t){u(e).randomFillSync(I(n,t))}),arguments)}function C(e,n){return l(new Function(w(e,n)))}function M(){return O((function(e,n){return l(u(e).call(u(n)))}),arguments)}function W(){return O((function(){return l(self.self)}),arguments)}function Y(){return O((function(){return l(window.window)}),arguments)}function H(){return O((function(){return l(globalThis.globalThis)}),arguments)}function $(){return O((function(){return l(t.g.global)}),arguments)}function K(e){return void 0===u(e)}function Q(e){return l(u(e).buffer)}function V(e){return l(new Uint8Array(u(e)))}function X(e,n,t){u(e).set(u(n),t>>>0)}function Z(e){return u(e).length}function G(e){return l(new Uint8Array(e>>>0))}function J(e,n,t){return l(u(e).subarray(n>>>0,t>>>0))}function ee(e){return l(u(e))}function ne(e,n){throw new Error(w(e,n))}function te(){return l(c.memory)}o()}catch(re){o(re)}}))},607:(e,n,t)=>{t.a(e,(async(e,n)=>{try{var r=t(629),o=e([r]);r=(o.then?(await o)():o)[0];var c=document.getElementById("maze-options"),a=document.getElementById("maze-type"),i=document.getElementById("maze-width"),u=document.getElementById("maze-height"),_=document.getElementById("maze-radius"),f=document.getElementById("maze");c.addEventListener("submit",(function(e){var n;switch(e.preventDefault(),a.children[a.selectedIndex].value){case"rectangle":var t=i.valueAsNumber,o=u.valueAsNumber,c=[t/2,0],d=[t/2,o-1],l=Uint32Array.of(t,o,d[0],d[1],c[0],c[1]);n=r.R_("rectangle",l,50);break;case"circle":var b=_.valueAsNumber,s=Uint32Array.of(b,2);n=r.R_("circle",s,50);break;default:throw new Error("Unknown maze type")}f.innerHTML=n}));var d=a.children[a.selectedIndex].value;a.addEventListener("change",(function(e){var n=e.target.value;if(n!==d){var t=document.getElementById("".concat(d,"-options")),r=document.getElementById("".concat(n,"-options"));t&&r&&(t.classList.add("hidden"),r.classList.remove("hidden"),d=n)}})),n()}catch(e){n(e)}}))},939:(e,n,t)=>{t.a(e,(async(r,o)=>{try{var c,a=r([c=t(629)]),[c]=a.then?(await a)():a;await t.v(n,e.id,"4cd70749c51b1d56dedd",{"./generator_bg.js":{__wbg_alert_d6054d59342dcbb7:c.xf,__wbindgen_object_drop_ref:c.ug,__wbg_process_70251ed1291754d5:c.pk,__wbindgen_is_object:c.Wl,__wbg_versions_b23f2588cdb2ddbb:c.u,__wbg_node_61b8c9a82499895d:c.NT,__wbindgen_is_string:c.eY,__wbg_require_2a93bc09fee45aca:c.qc,__wbg_crypto_2f56257a38275dbd:c.mR,__wbg_msCrypto_d07655bf62361f21:c.ZL,__wbg_getRandomValues_fb6b088efb6bead2:c.sP,__wbg_static_accessor_NODE_MODULE_33b45247c55045b0:c.wA,__wbg_randomFillSync_654a7797990fb8db:c.mm,__wbg_newnoargs_e23b458e372830de:c.TL,__wbg_call_ae78342adc33730a:c._3,__wbg_self_99737b4dcdf6f0d8:c.OF,__wbg_window_9b61fbbf3564c4fb:c.xB,__wbg_globalThis_8e275ef40caea3a3:c.KQ,__wbg_global_5de1e0f82bddcd27:c.vm,__wbindgen_is_undefined:c.XP,__wbg_buffer_7af23f65f6c64548:c.EF,__wbg_new_cc9018bd6f283b6f:c.cb,__wbg_set_f25e869e4565d2a2:c.Ip,__wbg_length_0acb1cf9bbaf8519:c.Oo,__wbg_newwithlength_8f0657faca9f1422:c.rC,__wbg_subarray_da527dbd24eafb6b:c.YN,__wbindgen_object_clone_ref:c.m_,__wbindgen_throw:c.Or,__wbindgen_memory:c.oH}}),o()}catch(e){o(e)}}),1)}},i={};function u(e){var n=i[e];if(void 0!==n)return n.exports;var t=i[e]={id:e,loaded:!1,exports:{}};return a[e](t,t.exports,u),t.loaded=!0,t.exports}e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",n="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),c=(e,n)=>e?e.push(n):o(n),u.a=(a,i,u)=>{var _,f,d,l=u&&[],b=a.exports,s=!0,g=!1,w=(n,t,r)=>{g||(g=!0,t.r+=n.length,n.map(((n,o)=>n[e](t,r))),g=!1)},m=new Promise(((e,n)=>{d=n,f=()=>(e(b),r(l),l=0)}));m[n]=b,m[e]=(e,n)=>{if(s)return o(e);_&&w(_,e,n),c(l,e),m.catch(n)},a.exports=m,i((a=>{var i;_=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var i=[];a.then((e=>{u[n]=e,r(i),i=0}),(e=>{u[t]=e,r(i),i=0}));var u={};return u[e]=(e,n)=>(c(i,e),a.catch(n)),u}}var _={};return _[e]=e=>o(e),_[n]=a,_})))(a);var u=()=>_.map((e=>{if(e[t])throw e[t];return e[n]})),f=new Promise(((e,n)=>{(i=()=>e(u)).r=0,w(_,i,n)}));return i.r?f:u()}),(e=>(e&&d(m[t]=e),f()))),s=!1},u.d=(e,n)=>{for(var t in n)u.o(n,t)&&!u.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),u.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),u.v=(e,n,t,r)=>{var o=fetch(u.p+""+t+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,r).then((n=>Object.assign(e,n.instance.exports))):o.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,r))).then((n=>Object.assign(e,n.instance.exports)))},(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var n=u.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),u(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,